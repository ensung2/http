HTTP 인터넷 네트워크

● 인터넷 통신
인터넷상에서 컴퓨터 둘은 어떻게 통신할까?

- 단순하게 생각하기 : 클라이언트에서 서버로 메세지 보내면 서버에서 받기
- 서버가 멀리있다면..? 인터넷 망을 통해서 보내면 된다!
- 근데 어떤 규칙으로 통신이 될까? = IP(인터넷 프로토콜)

● IP (인터넷 프로토콜)
IP주소를 통해 클->서버로 보냄
지정한 IP주소에 데이터 전달(패킷 단위로 전달)

1. 출발지 IP 지정 : 클라이언트가 IP주소를 받음
2. 인터넷망에 출발지 IP(클라이언트)를 노트끼리 서버로 전달
3. 목적지 IP 지정 : 서버도 IP주소가 있어야 함
4. 서버에서 클라이언트 보낼때도 동일한 방법으로 전달
5. 하지만 인터넷망의 복잡성으로 인해 원치않던 곳으로 전달될수도 있는 위험이 있다!!!!

● IP 프로토콜의 한계
- 비연결성 : 대상 서버가 어떤 상황인지 모른다면?
- 비신뢰성 : 패킷 소실, 전달 순서 문제 발
- 프로그램 구분 : 같은 IP를 사용하는 서버에서 통신하는 애플리케이션이 둘 이상이라면?

● TCP (프로토콜)

인터넷 프로토콜 스택의 4계층
1. HTTP, FTP (애플리케이션 계층)
2. TCP, UDP (전송 계층)
3. IP (인터넷 계층)
4. 네트워크 인터페이스 계층

● 프로토콜 계층
1. 프로그램이 메세지 생성
2. 소켓 라이브러리를 통해 전달
3. TCP 정보 생성, 메시지 데이터 포함
4. IP 패킷(출발지IP, 목적지IP) 생성, TCP 데이터 포함
5. LAN카드를 통해 이더넷 프레임(물리적인 정보)이 포함되어서 전달
6. 서버 도착

● 패킷 : 패키지 + 버킷 (택배 박스에 데이터 넣듯이 보내는것과 비슷)

● TCP/IP
: 출발지 PORT, 목적지 PORT, 전송 제어, 순서, 검증정보 등 IP만으로 해결이 안 됐던 순서 제어 문제 같은 것들이 해결됨
그리고 그 안에 실제 클라이언트가 요청했던 전송 데이터를 넣게 됨

● TCP 특징
(전송Transmission 제어Control 프로토콜Protocol)
- 연결 지향 (3-WAY HANDSHAKE) - SYN(접속 요청), SYN+ACK, ACK(요청 수락) => 연결 인식 후 데이터 전송 
- 데이터 전달 보증 (패킷 누락시 확인 가능, 데이터 전송 후 서버에서 데이터를 받았다는 응답이 옴)
- 순서 보장 (서버에 도착했는데 순서가 잘못되었다면 기본적으로 틀린 순서부터 다시 보내라고 응답이 옴)
= 결론. TCP는 신뢰할 수 있는 프로토콜로, 현재 대부분 사용 중이다.

● UDP (프로토콜)
- TCP와 같은 계층에 있는 프로토콜
- 별 기능이 없다. (TCP가 갖고 있는 특징 하나도 없음)
- IP에서 PORT(IP에서 패킷 구분할 때 사용), CHECK SUM(메세지 검사) 정도만 추가
- TCP에서 완료하지 못한 작업, 애플리케이션에서 추가 작업 필요

● PORT : 항구(연결)
Q. 한번에 둘 이상 연결해야 한다면? (구분을 어떻게 하지?)
A. 같은 IP 내의 프로세스를 포트를 붙여서 구분
- 0 ~ 65535 할당 가능(0~1023은 잘 알려지지 않음, 사용X)

● DNS (도메인 Domain 네임 Name 시스템 System)
- 도메인명 등록 후 IP주소로 변환 (도메인명 : naver.com / IP : 200.200.200...)
● IP의 단점 
- 번호 기억하기가 어렵다 (200.200.200...)
- 신규 IP로 변경될 수 있다 (접근 불가능)

<!-------------------------------------------------------------------------->

● 정리
- 복잡한 인터넷망에서 메세지를 보내려면?
1. IP(인터넷 프로토콜)이 있어야 한다. - 비신뢰성, port없음
2. TCP 프로토콜로 해결, (UDP는 IP에서 PORT정도만 추가됨, 추가 확장은 애플리케이션에서 수정 가능)
3. PORT : 같은 IP 안에서 동작하는 애플리케이션을 구분 (IP : 아파트 / PORT : -동 -호)
4. DNS : IP의 단점을 보완, 도메인명을 등록하여 사용할 수 있게 도와줌
